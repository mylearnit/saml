from saml2.client import Saml2Client
from saml2.config import Config as Saml2Config
from saml2 import (
    BINDING_HTTP_POST,
    BINDING_HTTP_REDIRECT,
    entity,
)
from django.conf import settings


def _get_saml_client():
    saml_settings = {
        'entityid': 'https://saml.isminspire.com/saml3/metadata/',
        'metadata': {
            'local': [settings.BASE_DIR / 'auth0_com-metadata.xml'],
        },
        'service': {
            'sp': {
                'endpoints': {
                    'assertion_consumer_service': [
                        ('https://saml.isminspire.com/saml3/acs/', BINDING_HTTP_REDIRECT),
                        ('https://saml.isminspire.com/saml3/acs/', BINDING_HTTP_POST)
                    ],
                },
                'allow_unsolicited': True,
                'authn_requests_signed': False,
                'logout_requests_signed': True,
                'want_assertions_signed': True,
                'want_response_signed': False,
            },
        },
    }

    # if 'ENTITY_ID' in settings.SAML2_AUTH:
    #     saml_settings['entityid'] = settings.SAML2_AUTH['ENTITY_ID']

    # if 'NAME_ID_FORMAT' in settings.SAML2_AUTH:
    #     saml_settings['service']['sp']['name_id_format'] = settings.SAML2_AUTH['NAME_ID_FORMAT']

    spConfig = Saml2Config()
    spConfig.load(saml_settings)
    spConfig.allow_unknown_attributes = True
    saml_client = Saml2Client(config=spConfig)
    return saml_client

def a():
    resp=''''''


    saml_client = _get_saml_client()

    authn_response = saml_client.parse_authn_request_response(resp, entity.BINDING_HTTP_POST)
    user_identity = authn_response.get_identity()
    print(user_identity)